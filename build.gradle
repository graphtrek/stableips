plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'gg.jte.gradle' version '3.1.16'
}


group = 'co.grtk'
version = '0.0.1-SNAPSHOT'
description = 'stableips'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'gg.jte:jte-spring-boot-starter-3:3.1.16'
    implementation 'org.web3j:core:4.10.3'
    implementation('org.xrpl:xrpl4j-core:4.0.3') {
        exclude group: 'org.junit'
        exclude group: 'org.junit.jupiter'
        exclude group: 'org.junit.platform'
    }
    implementation('org.xrpl:xrpl4j-client:4.0.3') {
        exclude group: 'org.junit'
        exclude group: 'org.junit.jupiter'
        exclude group: 'org.junit.platform'
    }

    // Solana Web3 Java SDK
    implementation 'com.mmorrell:solanaj:1.17.4'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly("org.postgresql:postgresql")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jte {
    generate()
    binaryStaticContent = true
}

tasks.named('test') {
    useJUnitPlatform()
}

// Load environment variables from env.properties for bootRun
tasks.named('bootRun') {
    def envPropsFile = file('../env.properties')
    if (envPropsFile.exists()) {
        envPropsFile.readLines().each { line ->
            def trimmed = line.trim()
            if (trimmed && !trimmed.startsWith('#')) {
                def parts = trimmed.split('=', 2)
                if (parts.length == 2) {
                    def key = parts[0].trim()
                    def value = parts[1].trim()
                    environment key, value
                }
            }
        }
    }
}
